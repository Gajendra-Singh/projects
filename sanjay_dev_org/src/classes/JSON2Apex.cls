//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are reserved words in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class JSON2Apex {
    public static void consumeObject(JSONParser parser) {
        Integer depth = 0;
        do {
            JSONToken curr = parser.getCurrentToken();
            if (curr == JSONToken.START_OBJECT || 
                curr == JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == JSONToken.END_OBJECT ||
                curr == JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }

    public class WorkingTime {
        public String FromTime {get;set;} 
        public String ToTime {get;set;} 

        public WorkingTime(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'FromTime') {
                            FromTime = parser.getText();
                        } else if (text == 'ToTime') {
                            ToTime = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'WorkingTime consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class WorkingTimes {
        public List<WorkingTime> WorkingTime {get;set;} 

        public WorkingTimes(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'WorkingTime') {
                            WorkingTime = new List<WorkingTime>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                WorkingTime.add(new WorkingTime(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'WorkingTimes consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Task {
        public String UID {get;set;} 
        public String Name {get;set;} 
        public String ID {get;set;} 
        public String Type_Z {get;set;} // in json: Type
        public String IsNull {get;set;} 
        public String CreateDate {get;set;} 
        public String WBS {get;set;} 
        public String OutlineNumber {get;set;} 
        public String OutlineLevel {get;set;} 
        public String Priority {get;set;} 
        public String Start {get;set;} 
        public String Finish {get;set;} 
        public String Duration {get;set;} 
        public String Work {get;set;} 
        public String Stop {get;set;} 
        public String Resume {get;set;} 
        public String EffortDriven {get;set;} 
        public String Recurring {get;set;} 
        public String OverAllocated {get;set;} 
        public String Estimated {get;set;} 
        public String Milestone {get;set;} 
        public String Summary {get;set;} 
        public String Critical {get;set;} 
        public String IsSubproject {get;set;} 
        public String ExternalTask {get;set;} 
        public String EarlyFinish {get;set;} 
        public String EarlyStart {get;set;} 
        public String LateStart {get;set;} 
        public String LateFinish {get;set;} 
        public String StartVariance {get;set;} 
        public String FinishVariance {get;set;} 
        public String WorkVariance {get;set;} 
        public String FreeSlack {get;set;} 
        public String TotalSlack {get;set;} 
        public String FixedCost {get;set;} 
        public String FixedCostAccrual {get;set;} 
        public String PercentComplete {get;set;} 
        public String PercentWorkComplete {get;set;} 
        public String Cost {get;set;} 
        public String OvertimeCost {get;set;} 
        public String OvertimeWork {get;set;} 
        public String ActualStart {get;set;} 
        public String ActualDuration {get;set;} 
        public String ActualCost {get;set;} 
        public String ActualOvertimeCost {get;set;} 
        public String ActualWork {get;set;} 
        public String ActualOvertimeWork {get;set;} 
        public String RegularWork {get;set;} 
        public String RemainingDuration {get;set;} 
        public String RemainingWork {get;set;} 
        public String RemainingOvertimeCost {get;set;} 
        public String RemainingOvertimeWork {get;set;} 
        public String ACWP {get;set;} 
        public String CV {get;set;} 
        public String ConstraintType {get;set;} 
        public String LevelAssignments {get;set;} 
        public String LevelingCanSplit {get;set;} 
        public String LevelingDelay {get;set;} 
        public String CalendarUID {get;set;} 
        public String Hyperlink {get;set;} 
        public String HyperlinkAddress {get;set;} 
        public String HyperlinkSubAddress {get;set;} 
        public String IgnoreResourceCalendar {get;set;} 
        public String HideBar {get;set;} 
        public String Rollup {get;set;} 
        public String BCWS {get;set;} 
        public String BCWP {get;set;} 
        public String PhysicalPercentComplete {get;set;} 
        public String EarnedValueMethod {get;set;} 
        public Baseline Baseline {get;set;} 
        public String IsPublished {get;set;} 
        public String ActualFinish {get;set;} 
        public String ConstraintDate {get;set;} 
        public List<PredecessorLink> PredecessorLink {get;set;} 
        public String Notes {get;set;} 

        public Task(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'UID') {
                            UID = parser.getText();
                        } else if (text == 'Name') {
                            Name = parser.getText();
                        } else if (text == 'ID') {
                            ID = parser.getText();
                        } else if (text == 'Type') {
                            Type_Z = parser.getText();
                        } else if (text == 'IsNull') {
                            IsNull = parser.getText();
                        } else if (text == 'CreateDate') {
                            CreateDate = parser.getText();
                        } else if (text == 'WBS') {
                            WBS = parser.getText();
                        } else if (text == 'OutlineNumber') {
                            OutlineNumber = parser.getText();
                        } else if (text == 'OutlineLevel') {
                            OutlineLevel = parser.getText();
                        } else if (text == 'Priority') {
                            Priority = parser.getText();
                        } else if (text == 'Start') {
                            Start = parser.getText();
                        } else if (text == 'Finish') {
                            Finish = parser.getText();
                        } else if (text == 'Duration') {
                            Duration = parser.getText();
                        } else if (text == 'Work') {
                            Work = parser.getText();
                        } else if (text == 'Stop') {
                            Stop = parser.getText();
                        } else if (text == 'Resume') {
                            Resume = parser.getText();
                        } else if (text == 'EffortDriven') {
                            EffortDriven = parser.getText();
                        } else if (text == 'Recurring') {
                            Recurring = parser.getText();
                        } else if (text == 'OverAllocated') {
                            OverAllocated = parser.getText();
                        } else if (text == 'Estimated') {
                            Estimated = parser.getText();
                        } else if (text == 'Milestone') {
                            Milestone = parser.getText();
                        } else if (text == 'Summary') {
                            Summary = parser.getText();
                        } else if (text == 'Critical') {
                            Critical = parser.getText();
                        } else if (text == 'IsSubproject') {
                            IsSubproject = parser.getText();
                        } else if (text == 'ExternalTask') {
                            ExternalTask = parser.getText();
                        } else if (text == 'EarlyFinish') {
                            EarlyFinish = parser.getText();
                        } else if (text == 'EarlyStart') {
                            EarlyStart = parser.getText();
                        } else if (text == 'LateStart') {
                            LateStart = parser.getText();
                        } else if (text == 'LateFinish') {
                            LateFinish = parser.getText();
                        } else if (text == 'StartVariance') {
                            StartVariance = parser.getText();
                        } else if (text == 'FinishVariance') {
                            FinishVariance = parser.getText();
                        } else if (text == 'WorkVariance') {
                            WorkVariance = parser.getText();
                        } else if (text == 'FreeSlack') {
                            FreeSlack = parser.getText();
                        } else if (text == 'TotalSlack') {
                            TotalSlack = parser.getText();
                        } else if (text == 'FixedCost') {
                            FixedCost = parser.getText();
                        } else if (text == 'FixedCostAccrual') {
                            FixedCostAccrual = parser.getText();
                        } else if (text == 'PercentComplete') {
                            PercentComplete = parser.getText();
                        } else if (text == 'PercentWorkComplete') {
                            PercentWorkComplete = parser.getText();
                        } else if (text == 'Cost') {
                            Cost = parser.getText();
                        } else if (text == 'OvertimeCost') {
                            OvertimeCost = parser.getText();
                        } else if (text == 'OvertimeWork') {
                            OvertimeWork = parser.getText();
                        } else if (text == 'ActualStart') {
                            ActualStart = parser.getText();
                        } else if (text == 'ActualDuration') {
                            ActualDuration = parser.getText();
                        } else if (text == 'ActualCost') {
                            ActualCost = parser.getText();
                        } else if (text == 'ActualOvertimeCost') {
                            ActualOvertimeCost = parser.getText();
                        } else if (text == 'ActualWork') {
                            ActualWork = parser.getText();
                        } else if (text == 'ActualOvertimeWork') {
                            ActualOvertimeWork = parser.getText();
                        } else if (text == 'RegularWork') {
                            RegularWork = parser.getText();
                        } else if (text == 'RemainingDuration') {
                            RemainingDuration = parser.getText();
                        } else if (text == 'RemainingWork') {
                            RemainingWork = parser.getText();
                        } else if (text == 'RemainingOvertimeCost') {
                            RemainingOvertimeCost = parser.getText();
                        } else if (text == 'RemainingOvertimeWork') {
                            RemainingOvertimeWork = parser.getText();
                        } else if (text == 'ACWP') {
                            ACWP = parser.getText();
                        } else if (text == 'CV') {
                            CV = parser.getText();
                        } else if (text == 'ConstraintType') {
                            ConstraintType = parser.getText();
                        } else if (text == 'LevelAssignments') {
                            LevelAssignments = parser.getText();
                        } else if (text == 'LevelingCanSplit') {
                            LevelingCanSplit = parser.getText();
                        } else if (text == 'LevelingDelay') {
                            LevelingDelay = parser.getText();
                        } else if (text == 'CalendarUID') {
                            CalendarUID = parser.getText();
                        } else if (text == 'Hyperlink') {
                            Hyperlink = parser.getText();
                        } else if (text == 'HyperlinkAddress') {
                            HyperlinkAddress = parser.getText();
                        } else if (text == 'HyperlinkSubAddress') {
                            HyperlinkSubAddress = parser.getText();
                        } else if (text == 'IgnoreResourceCalendar') {
                            IgnoreResourceCalendar = parser.getText();
                        } else if (text == 'HideBar') {
                            HideBar = parser.getText();
                        } else if (text == 'Rollup') {
                            Rollup = parser.getText();
                        } else if (text == 'BCWS') {
                            BCWS = parser.getText();
                        } else if (text == 'BCWP') {
                            BCWP = parser.getText();
                        } else if (text == 'PhysicalPercentComplete') {
                            PhysicalPercentComplete = parser.getText();
                        } else if (text == 'EarnedValueMethod') {
                            EarnedValueMethod = parser.getText();
                        } else if (text == 'Baseline') {
                            Baseline = new Baseline(parser);
                        } else if (text == 'IsPublished') {
                            IsPublished = parser.getText();
                        } else if (text == 'ActualFinish') {
                            ActualFinish = parser.getText();
                        } else if (text == 'ConstraintDate') {
                            ConstraintDate = parser.getText();
                        } else if (text == 'PredecessorLink') {
                            PredecessorLink = new List<PredecessorLink>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                PredecessorLink.add(new PredecessorLink(parser));
                            }
                        } else if (text == 'Notes') {
                            Notes = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Task consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Tasks {
        public List<Task> Task {get;set;} 

        public Tasks(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'Task') {
                            Task = new List<Task>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                Task.add(new Task(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'Tasks consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public Project Project {get;set;} 

    public JSON2Apex(JSONParser parser) {
        while (parser.nextToken() != JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != JSONToken.VALUE_NULL) {
                    if (text == 'Project') {
                        Project = new Project(parser);
                    } else {
                        System.debug(LoggingLevel.WARN, 'Root consuming unrecognized property: '+text);
                        consumeObject(parser);
                    }
                }
            }
        }
    }
    
    public class Calendar {
        public String UID {get;set;} 
        public String Name {get;set;} 
        public String IsBaseCalendar {get;set;} 
        public String BaseCalendarUID {get;set;} 
        public WeekDays WeekDays {get;set;} 

        public Calendar(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'UID') {
                            UID = parser.getText();
                        } else if (text == 'Name') {
                            Name = parser.getText();
                        } else if (text == 'IsBaseCalendar') {
                            IsBaseCalendar = parser.getText();
                        } else if (text == 'BaseCalendarUID') {
                            BaseCalendarUID = parser.getText();
                        } else if (text == 'WeekDays') {
                            WeekDays = new WeekDays(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Calendar consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Calendars {
        public List<Calendar> Calendar {get;set;} 

        public Calendars(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'Calendar') {
                            Calendar = new List<Calendar>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                Calendar.add(new Calendar(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'Calendars consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Resource {
        public String UID {get;set;} 
        public String ID {get;set;} 
        public String Type_Z {get;set;} // in json: Type
        public String IsNull {get;set;} 
        public String WorkGroup {get;set;} 
        public String MaxUnits {get;set;} 
        public String PeakUnits {get;set;} 
        public String OverAllocated {get;set;} 
        public String CanLevel {get;set;} 
        public String AccrueAt {get;set;} 
        public String Work {get;set;} 
        public String RegularWork {get;set;} 
        public String OvertimeWork {get;set;} 
        public String ActualWork {get;set;} 
        public String RemainingWork {get;set;} 
        public String ActualOvertimeWork {get;set;} 
        public String RemainingOvertimeWork {get;set;} 
        public String PercentWorkComplete {get;set;} 
        public String StandardRate {get;set;} 
        public String StandardRateFormat {get;set;} 
        public String Cost {get;set;} 
        public String OvertimeRate {get;set;} 
        public String OvertimeRateFormat {get;set;} 
        public String OvertimeCost {get;set;} 
        public String CostPerUse {get;set;} 
        public String ActualCost {get;set;} 
        public String ActualOvertimeCost {get;set;} 
        public String RemainingCost {get;set;} 
        public String RemainingOvertimeCost {get;set;} 
        public String WorkVariance {get;set;} 
        public String CostVariance {get;set;} 
        public String SV {get;set;} 
        public String CV {get;set;} 
        public String ACWP {get;set;} 
        public String CalendarUID {get;set;} 
        public String BCWS {get;set;} 
        public String BCWP {get;set;} 
        public String IsInactive {get;set;} 
        public String IsGeneric {get;set;} 
        public String IsEnterprise {get;set;} 
        public String IsBudget {get;set;} 
        public String BookingType {get;set;} 
        public String IsCostResource {get;set;} 
        public String CreationDate {get;set;} 
        public String Name {get;set;} 
        public String Initials {get;set;} 
        public String Start {get;set;} 
        public String Finish {get;set;} 
        public String Notes {get;set;} 
        public String Group_Z {get;set;} // in json: Group
        public String EmailAddress {get;set;} 

        public Resource(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'UID') {
                            UID = parser.getText();
                        } else if (text == 'ID') {
                            ID = parser.getText();
                        } else if (text == 'Type') {
                            Type_Z = parser.getText();
                        } else if (text == 'IsNull') {
                            IsNull = parser.getText();
                        } else if (text == 'WorkGroup') {
                            WorkGroup = parser.getText();
                        } else if (text == 'MaxUnits') {
                            MaxUnits = parser.getText();
                        } else if (text == 'PeakUnits') {
                            PeakUnits = parser.getText();
                        } else if (text == 'OverAllocated') {
                            OverAllocated = parser.getText();
                        } else if (text == 'CanLevel') {
                            CanLevel = parser.getText();
                        } else if (text == 'AccrueAt') {
                            AccrueAt = parser.getText();
                        } else if (text == 'Work') {
                            Work = parser.getText();
                        } else if (text == 'RegularWork') {
                            RegularWork = parser.getText();
                        } else if (text == 'OvertimeWork') {
                            OvertimeWork = parser.getText();
                        } else if (text == 'ActualWork') {
                            ActualWork = parser.getText();
                        } else if (text == 'RemainingWork') {
                            RemainingWork = parser.getText();
                        } else if (text == 'ActualOvertimeWork') {
                            ActualOvertimeWork = parser.getText();
                        } else if (text == 'RemainingOvertimeWork') {
                            RemainingOvertimeWork = parser.getText();
                        } else if (text == 'PercentWorkComplete') {
                            PercentWorkComplete = parser.getText();
                        } else if (text == 'StandardRate') {
                            StandardRate = parser.getText();
                        } else if (text == 'StandardRateFormat') {
                            StandardRateFormat = parser.getText();
                        } else if (text == 'Cost') {
                            Cost = parser.getText();
                        } else if (text == 'OvertimeRate') {
                            OvertimeRate = parser.getText();
                        } else if (text == 'OvertimeRateFormat') {
                            OvertimeRateFormat = parser.getText();
                        } else if (text == 'OvertimeCost') {
                            OvertimeCost = parser.getText();
                        } else if (text == 'CostPerUse') {
                            CostPerUse = parser.getText();
                        } else if (text == 'ActualCost') {
                            ActualCost = parser.getText();
                        } else if (text == 'ActualOvertimeCost') {
                            ActualOvertimeCost = parser.getText();
                        } else if (text == 'RemainingCost') {
                            RemainingCost = parser.getText();
                        } else if (text == 'RemainingOvertimeCost') {
                            RemainingOvertimeCost = parser.getText();
                        } else if (text == 'WorkVariance') {
                            WorkVariance = parser.getText();
                        } else if (text == 'CostVariance') {
                            CostVariance = parser.getText();
                        } else if (text == 'SV') {
                            SV = parser.getText();
                        } else if (text == 'CV') {
                            CV = parser.getText();
                        } else if (text == 'ACWP') {
                            ACWP = parser.getText();
                        } else if (text == 'CalendarUID') {
                            CalendarUID = parser.getText();
                        } else if (text == 'BCWS') {
                            BCWS = parser.getText();
                        } else if (text == 'BCWP') {
                            BCWP = parser.getText();
                        } else if (text == 'IsInactive') {
                            IsInactive = parser.getText();
                        } else if (text == 'IsGeneric') {
                            IsGeneric = parser.getText();
                        } else if (text == 'IsEnterprise') {
                            IsEnterprise = parser.getText();
                        } else if (text == 'IsBudget') {
                            IsBudget = parser.getText();
                        } else if (text == 'BookingType') {
                            BookingType = parser.getText();
                        } else if (text == 'IsCostResource') {
                            IsCostResource = parser.getText();
                        } else if (text == 'CreationDate') {
                            CreationDate = parser.getText();
                        } else if (text == 'Name') {
                            Name = parser.getText();
                        } else if (text == 'Initials') {
                            Initials = parser.getText();
                        } else if (text == 'Start') {
                            Start = parser.getText();
                        } else if (text == 'Finish') {
                            Finish = parser.getText();
                        } else if (text == 'Notes') {
                            Notes = parser.getText();
                        } else if (text == 'Group') {
                            Group_Z = parser.getText();
                        } else if (text == 'EmailAddress') {
                            EmailAddress = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Resource consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Assignments {
        public List<Assignment> Assignment {get;set;} 

        public Assignments(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'Assignment') {
                            Assignment = new List<Assignment>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                Assignment.add(new Assignment(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'Assignments consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class TimephasedData {
        public String Type_Z {get;set;} // in json: Type
        public String UID {get;set;} 
        public String Start {get;set;} 
        public String Finish {get;set;} 
        public String Unit {get;set;} 
        public String Value {get;set;} 

        public TimephasedData(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'Type') {
                            Type_Z = parser.getText();
                        } else if (text == 'UID') {
                            UID = parser.getText();
                        } else if (text == 'Start') {
                            Start = parser.getText();
                        } else if (text == 'Finish') {
                            Finish = parser.getText();
                        } else if (text == 'Unit') {
                            Unit = parser.getText();
                        } else if (text == 'Value') {
                            Value = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'TimephasedData consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Baseline {
        public String Start {get;set;} 
        public String Finish {get;set;} 
        public String Duration {get;set;} 

        public Baseline(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'Start') {
                            Start = parser.getText();
                        } else if (text == 'Finish') {
                            Finish = parser.getText();
                        } else if (text == 'Duration') {
                            Duration = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Baseline consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Assignment {
        public String UID {get;set;} 
        public String ResourceUID {get;set;} 
        public String TaskUID {get;set;} 
        public String ActualCost {get;set;} 
        public String ActualFinish {get;set;} 
        public String ActualStart {get;set;} 
        public String ActualWork {get;set;} 
        public String Cost {get;set;} 
        public String Delay {get;set;} 
        public String Finish {get;set;} 
        public String LinkedFields {get;set;} 
        public String PeekUnits {get;set;} 
        public String Start {get;set;} 
        public String Stop {get;set;} 
        public String Units {get;set;} 
        public String Work {get;set;} 
        public String WorkContour {get;set;} 
        public String PercentWorkComplete {get;set;} 
        public List<TimephasedData> TimephasedData {get;set;} 

        public Assignment(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'UID') {
                            UID = parser.getText();
                        } else if (text == 'ResourceUID') {
                            ResourceUID = parser.getText();
                        } else if (text == 'TaskUID') {
                            TaskUID = parser.getText();
                        } else if (text == 'ActualCost') {
                            ActualCost = parser.getText();
                        } else if (text == 'ActualFinish') {
                            ActualFinish = parser.getText();
                        } else if (text == 'ActualStart') {
                            ActualStart = parser.getText();
                        } else if (text == 'ActualWork') {
                            ActualWork = parser.getText();
                        } else if (text == 'Cost') {
                            Cost = parser.getText();
                        } else if (text == 'Delay') {
                            Delay = parser.getText();
                        } else if (text == 'Finish') {
                            Finish = parser.getText();
                        } else if (text == 'LinkedFields') {
                            LinkedFields = parser.getText();
                        } else if (text == 'PeekUnits') {
                            PeekUnits = parser.getText();
                        } else if (text == 'Start') {
                            Start = parser.getText();
                        } else if (text == 'Stop') {
                            Stop = parser.getText();
                        } else if (text == 'Units') {
                            Units = parser.getText();
                        } else if (text == 'Work') {
                            Work = parser.getText();
                        } else if (text == 'WorkContour') {
                            WorkContour = parser.getText();
                        } else if (text == 'PercentWorkComplete') {
                            PercentWorkComplete = parser.getText();
                        } else if (text == 'TimephasedData') {
                            TimephasedData = new List<TimephasedData>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                TimephasedData.add(new TimephasedData(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'Assignment consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Project {
        public String SaveVersion {get;set;} 
        public String Name {get;set;} 
        public String Title {get;set;} 
        public String Company {get;set;} 
        public String Author {get;set;} 
        public String CreationDate {get;set;} 
        public String LastSaved {get;set;} 
        public String ScheduleFromStart {get;set;} 
        public String StartDate {get;set;} 
        public String FinishDate {get;set;} 
        public String FYStartDate {get;set;} 
        public String CurrencyDigits {get;set;} 
        public String CurrencySymbol {get;set;} 
        public String CurrencySymbolPosition {get;set;} 
        public String CalendarUID {get;set;} 
        public String DefaultStartTime {get;set;} 
        public String DefaultFinishTime {get;set;} 
        public String MinutesPerDay {get;set;} 
        public String MinutesPerWeek {get;set;} 
        public String DefaultStandardRate {get;set;} 
        public String DefaultOvertimeRate {get;set;} 
        public String DurationFormat {get;set;} 
        public String WorkFormat {get;set;} 
        public String CurrentDate {get;set;} 
        public String SplitsInProgressTasks {get;set;} 
        public String TaskUpdatesResource {get;set;} 
        public String WeekStartDay {get;set;} 
        public String CriticalSlackLimit {get;set;} 
        public String DaysPerMonth {get;set;} 
        public String DefaultTaskType {get;set;} 
        public String DefaultFixedCostAccrual {get;set;} 
        public String EditableActualCosts {get;set;} 
        public String HonorConstraints {get;set;} 
        public String InsertedProjectsLikeSummary {get;set;} 
        public String MultipleCriticalPaths {get;set;} 
        public String NewTasksEffortDriven {get;set;} 
        public String NewTasksEstimated {get;set;} 
        public String SpreadActualCost {get;set;} 
        public String SpreadPercentComplete {get;set;} 
        public String FiscalYearStart {get;set;} 
        public String MoveCompletedEndsBack {get;set;} 
        public String MoveRemainingStartsBack {get;set;} 
        public String MoveRemainingStartsForward {get;set;} 
        public String MoveCompletedEndsForward {get;set;} 
        public String BaselineForEarnedValue {get;set;} 
        public String AutoAddNewResourcesAndTasks {get;set;} 
        public String MicrosoftProjectServerURL {get;set;} 
        public String Autolink {get;set;} 
        public String NewTaskStartDate {get;set;} 
        public String DefaultTaskEVMethod {get;set;} 
        public String ProjectExternallyEdited {get;set;} 
        public String ExtendedCreationDate {get;set;} 
        public String ActualsInSync {get;set;} 
        public String RemoveFileProperties {get;set;} 
        public String AdminProject {get;set;} 
        public String OutlineCodes {get;set;} 
        public String WBSMasks {get;set;} 
        public String ExtendedAttributes {get;set;} 
        public Calendars Calendars {get;set;} 
        public Tasks Tasks {get;set;} 
        public Resources Resources {get;set;} 
        public Assignments Assignments {get;set;} 
        public String xmlns {get;set;} 

        public Project(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'SaveVersion') {
                            SaveVersion = parser.getText();
                        } else if (text == 'Name') {
                            Name = parser.getText();
                        } else if (text == 'Title') {
                            Title = parser.getText();
                        } else if (text == 'Company') {
                            Company = parser.getText();
                        } else if (text == 'Author') {
                            Author = parser.getText();
                        } else if (text == 'CreationDate') {
                            CreationDate = parser.getText();
                        } else if (text == 'LastSaved') {
                            LastSaved = parser.getText();
                        } else if (text == 'ScheduleFromStart') {
                            ScheduleFromStart = parser.getText();
                        } else if (text == 'StartDate') {
                            StartDate = parser.getText();
                        } else if (text == 'FinishDate') {
                            FinishDate = parser.getText();
                        } else if (text == 'FYStartDate') {
                            FYStartDate = parser.getText();
                        } else if (text == 'CurrencyDigits') {
                            CurrencyDigits = parser.getText();
                        } else if (text == 'CurrencySymbol') {
                            CurrencySymbol = parser.getText();
                        } else if (text == 'CurrencySymbolPosition') {
                            CurrencySymbolPosition = parser.getText();
                        } else if (text == 'CalendarUID') {
                            CalendarUID = parser.getText();
                        } else if (text == 'DefaultStartTime') {
                            DefaultStartTime = parser.getText();
                        } else if (text == 'DefaultFinishTime') {
                            DefaultFinishTime = parser.getText();
                        } else if (text == 'MinutesPerDay') {
                            MinutesPerDay = parser.getText();
                        } else if (text == 'MinutesPerWeek') {
                            MinutesPerWeek = parser.getText();
                        } else if (text == 'DefaultStandardRate') {
                            DefaultStandardRate = parser.getText();
                        } else if (text == 'DefaultOvertimeRate') {
                            DefaultOvertimeRate = parser.getText();
                        } else if (text == 'DurationFormat') {
                            DurationFormat = parser.getText();
                        } else if (text == 'WorkFormat') {
                            WorkFormat = parser.getText();
                        } else if (text == 'CurrentDate') {
                            CurrentDate = parser.getText();
                        } else if (text == 'SplitsInProgressTasks') {
                            SplitsInProgressTasks = parser.getText();
                        } else if (text == 'TaskUpdatesResource') {
                            TaskUpdatesResource = parser.getText();
                        } else if (text == 'WeekStartDay') {
                            WeekStartDay = parser.getText();
                        } else if (text == 'CriticalSlackLimit') {
                            CriticalSlackLimit = parser.getText();
                        } else if (text == 'DaysPerMonth') {
                            DaysPerMonth = parser.getText();
                        } else if (text == 'DefaultTaskType') {
                            DefaultTaskType = parser.getText();
                        } else if (text == 'DefaultFixedCostAccrual') {
                            DefaultFixedCostAccrual = parser.getText();
                        } else if (text == 'EditableActualCosts') {
                            EditableActualCosts = parser.getText();
                        } else if (text == 'HonorConstraints') {
                            HonorConstraints = parser.getText();
                        } else if (text == 'InsertedProjectsLikeSummary') {
                            InsertedProjectsLikeSummary = parser.getText();
                        } else if (text == 'MultipleCriticalPaths') {
                            MultipleCriticalPaths = parser.getText();
                        } else if (text == 'NewTasksEffortDriven') {
                            NewTasksEffortDriven = parser.getText();
                        } else if (text == 'NewTasksEstimated') {
                            NewTasksEstimated = parser.getText();
                        } else if (text == 'SpreadActualCost') {
                            SpreadActualCost = parser.getText();
                        } else if (text == 'SpreadPercentComplete') {
                            SpreadPercentComplete = parser.getText();
                        } else if (text == 'FiscalYearStart') {
                            FiscalYearStart = parser.getText();
                        } else if (text == 'MoveCompletedEndsBack') {
                            MoveCompletedEndsBack = parser.getText();
                        } else if (text == 'MoveRemainingStartsBack') {
                            MoveRemainingStartsBack = parser.getText();
                        } else if (text == 'MoveRemainingStartsForward') {
                            MoveRemainingStartsForward = parser.getText();
                        } else if (text == 'MoveCompletedEndsForward') {
                            MoveCompletedEndsForward = parser.getText();
                        } else if (text == 'BaselineForEarnedValue') {
                            BaselineForEarnedValue = parser.getText();
                        } else if (text == 'AutoAddNewResourcesAndTasks') {
                            AutoAddNewResourcesAndTasks = parser.getText();
                        } else if (text == 'MicrosoftProjectServerURL') {
                            MicrosoftProjectServerURL = parser.getText();
                        } else if (text == 'Autolink') {
                            Autolink = parser.getText();
                        } else if (text == 'NewTaskStartDate') {
                            NewTaskStartDate = parser.getText();
                        } else if (text == 'DefaultTaskEVMethod') {
                            DefaultTaskEVMethod = parser.getText();
                        } else if (text == 'ProjectExternallyEdited') {
                            ProjectExternallyEdited = parser.getText();
                        } else if (text == 'ExtendedCreationDate') {
                            ExtendedCreationDate = parser.getText();
                        } else if (text == 'ActualsInSync') {
                            ActualsInSync = parser.getText();
                        } else if (text == 'RemoveFileProperties') {
                            RemoveFileProperties = parser.getText();
                        } else if (text == 'AdminProject') {
                            AdminProject = parser.getText();
                        } else if (text == 'OutlineCodes') {
                            OutlineCodes = parser.getText();
                        } else if (text == 'WBSMasks') {
                            WBSMasks = parser.getText();
                        } else if (text == 'ExtendedAttributes') {
                            ExtendedAttributes = parser.getText();
                        } else if (text == 'Calendars') {
                            Calendars = new Calendars(parser);
                        } else if (text == 'Tasks') {
                            Tasks = new Tasks(parser);
                        } else if (text == 'Resources') {
                            Resources = new Resources(parser);
                        } else if (text == 'Assignments') {
                            Assignments = new Assignments(parser);
                        } else if (text == '_xmlns') {
                            xmlns = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Project consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class WeekDays {
        public List<WeekDay_Z> WeekDay{get;set;} 

        public WeekDays(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'WeekDay') {
                            WeekDay = new List<WeekDay_Z>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                WeekDay.add(new WeekDay_Z(parser));
                            }            
                        } else {
                            System.debug(LoggingLevel.WARN, 'WeekDays consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class WeekDay_Z {
        public String DayType {get;set;} 
        public String DayWorking {get;set;} 
        public WorkingTimes WorkingTimes {get;set;} 

        public WeekDay_Z(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'DayType') {
                            DayType = parser.getText();
                        } else if (text == 'DayWorking') {
                            DayWorking = parser.getText();
                        } else if (text == 'WorkingTimes') {
                            WorkingTimes = new WorkingTimes(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'WeekDay_Z consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class PredecessorLink {
        public String PredecessorUID {get;set;} 
        public String Type_Z {get;set;} // in json: Type
        public String CrossProject {get;set;} 
        public String LinkLag {get;set;} 
        public String LagFormat {get;set;} 

        public PredecessorLink(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'PredecessorUID') {
                            PredecessorUID = parser.getText();
                        } else if (text == 'Type') {
                            Type_Z = parser.getText();
                        } else if (text == 'CrossProject') {
                            CrossProject = parser.getText();
                        } else if (text == 'LinkLag') {
                            LinkLag = parser.getText();
                        } else if (text == 'LagFormat') {
                            LagFormat = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'PredecessorLink consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class WeekDays_Z {
        public List<WeekDay_Z> WeekDay {get;set;} 

        public WeekDays_Z(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'WeekDay') {
                            WeekDay = new List<WeekDay_Z>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                WeekDay.add(new WeekDay_Z(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'WeekDays_Z consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Resources {
        public List<Resource> Resource {get;set;} 

        public Resources(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'Resource') {
                            Resource = new List<Resource>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                Resource.add(new Resource(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'Resources consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }        
                }
            }
        }
    }
    
    
   /* public static JSON2Apex parse(String json) {
        return new JSON2Apex(System.JSON.createParser(json));
    }  */   
    
    public static JSON2Apex parse(String json) {
        return (JSON2Apex) System.JSON.deserialize(json, JSON2Apex.class);
    }
}